# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"
#########################	
###PLUGINS
#########################

#################################################################################################################
[manager]
#################################################################################################################
prepend_keymap = [
#Custom shell
	{on = [ "\\" ] ,run = "plugin custom-shell -- zsh --wait", desc = "custom-shell as default, waits for user"},
#Git changes
	{on   = [ "g", "m" ], run  = "plugin vcs-files", desc = "Show Git file changes"},
#Chmod the selected file
	{on   = [ "c", "m" ], run  = "plugin chmod", desc = "Chmod on selected files"},
#Cd to repository's root
	{on = [ "g", "r" ], run = 'shell -- ya emit cd "$(git rev-parse --show-toplevel)"', desc="cd to git root"},
#Yank file to clipboard
	#{on  = "<A-\\>", run = [ 'shell -- for path in "$@"; do echo "file://$path"; done | wl-copy -t text/uri-list', "yank" ], desc = "Yank file to clipboard"},
#Shell
	{on   = "!", run  = 'shell "$SHELL" --block' ,desc = "Open shell here"},
#Command Prompt
    { on = [ ".", "p" ], run = "plugin command", desc = "Yazi command prompt" },

#Vcs-files
    { on = [ ".", "c" ], run = "plugin vcs-files", desc = "Show Git file changes" },

#Smart filter
    { on = "F", run = "plugin smart-filter", desc = "Smart filter" },

#Restore Tabs
    { on = [ "t", "w" ], run = "plugin close-and-restore-tab close_to_left", desc = "Close the current tab and turn to left tab, or quit if it is last tab" },
    { on = [ "t", "r" ], run = "plugin close-and-restore-tab restore", desc = "Restore the closed tab" },

#Bookmarks
    { on = [ "m" ], run = "plugin bookmarks save", desc = "Save current position as a bookmark" },
    { on = [ "'" ], run = "plugin bookmarks jump", desc = "Jump to a bookmark" },
    { on = [ "b", "d" ], run = "plugin bookmarks delete", desc = "Delete a bookmark" },
    { on = [ "b", "D" ], run = "plugin bookmarks delete_all", desc = "Delete all bookmarks" },

#Bunny
    { on = ";", run = "plugin bunny", desc = "Start bunny.yazi" },

#Projects
	{on = [ "<C-q>" ], run = "plugin projects quit", desc = "Save last project and exit the process"},
	{ on = [ "P", "s" ], run = "plugin projects save", desc = "Save current project" },
	{ on = [ "P", "l" ], run = "plugin projects load", desc = "Load project" },
	{ on = [ "P", "P" ], run = "plugin projects load_last", desc = "Load last project" },
	{ on = [ "P", "d" ], run = "plugin projects delete", desc = "Delete project" },
	{ on = [ "P", "D" ], run = "plugin projects delete_all", desc = "Delete all projects" },
	{ on = [ "P", "m" ], run = "plugin projects 'merge current'", desc = "Merge current tab to other projects" },
	{ on = [ "P", "M" ], run = "plugin projects 'merge all'", desc = "Merge current project to other projects" },

#Compress
    { on = ["C", "c"] ,run = "plugin ouch", desc = "Archive selected files" },
    { on = ["C", "C"] ,run = 'ouch d -y "%*"', desc = "Extract here with ouch", for = "windows"   },

#What-size
	{ on   = [ ".", "S" ], run  = "plugin what-size", desc = "Calc size of selection or cwd" },

#Lazygit
    { on = "<C-g>", run = "plugin lazygit", desc = "run lazygit" },

#Copy content
    { on = ["c", "C"], run = ["plugin copy-file-contents"], desc = "Copy contents of file" },

#Diff
    { on = "<C-d>", run = "plugin diff", desc = "Diff the selected with the hovered file" },

#Jump to char
    { on = "<S-f>", run = "plugin jump-to-char", desc = "Jump to char" },

#Smart paste
    { on = ["P", "p"], run = "plugin smart-paste", desc = "Paste into the hovered directory or CWD" },

#Parent arrow
    { on = "K", run = "plugin parent-arrow --args=-1" },
    { on = "J", run = "plugin parent-arrow --args=1" },
    { on = "<C-y>", run = "plugin clipboard" },
# Relative motions
    { on = [ "1" ], run = "plugin relative-motions 1", desc = "Move in relative steps" },
    { on = [ "2" ], run = "plugin relative-motions 2", desc = "Move in relative steps" },
    { on = [ "3" ], run = "plugin relative-motions 3", desc = "Move in relative steps" },
    { on = [ "4" ], run = "plugin relative-motions 4", desc = "Move in relative steps" },
    { on = [ "5" ], run = "plugin relative-motions 5", desc = "Move in relative steps" },
    { on = [ "6" ], run = "plugin relative-motions 6", desc = "Move in relative steps" },
    { on = [ "7" ], run = "plugin relative-motions 7", desc = "Move in relative steps" },
    { on = [ "8" ], run = "plugin relative-motions 8", desc = "Move in relative steps" },
    { on = [ "9" ], run = "plugin relative-motions 9", desc = "Move in relative steps" },
# Keyjump
    #{ on = [ "i", "k" ], run = "plugin keyjump --sync --args=keep", desc = "Keyjump (Keep mode)" },
    #{ on = [ "i", "n"], run = "plugin keyjump --sync", desc = "Keyjump (Normal mode)" },
    #{ on = [ "i", "s"], run = "plugin keyjump --sync --args=select", desc = "Keyjump (Select mode)" },
    #{ on = [ "i", "g"], run = "plugin keyjump --sync --args=global", desc = "Keyjump (Global mode)" },
# SearchJump
	{on   = [ "i"], run = "plugin searchjump -- autocd", desc = "searchjump mode"},

#─────────────────────────── TOGGLE TAG(S) ────────────────────────────
# Toggle a tag (press any tag key)
# A tag hint window will show up.
# Simply press any tag key to toggle that tag for selected or hovered files/folders.
{ on = [ "T", "t", "k" ], run = "plugin simple-tag -- toggle-tag", desc = "Toggle a tag (press any key)" },

# Fast Toggle tag(s) with fixed keys=!1q. key=!1q tag=!1q or tags=!1q also work
# NOTE: For key=" (Quotation mark), then use key=\" (Backslash + Quotation mark) instead.
{ on = [ "|" ], run = "plugin simple-tag -- toggle-tag --keys=!1q", desc = "Toggle tag(s) with fixed tag key(s) = (! and 1 and q)" },
{ on = [ "|" ], run = "plugin simple-tag -- toggle-tag --keys=*", desc = "Toggle tag with fixed tag key = *" },
{ on = [ "|" ], run = "plugin simple-tag -- toggle-tag --key=*", desc = "Toggle tag with fixed tag key = *" },

# Toggle tag(s) with value from input box.
# A tag hint window and an input box will show up.
# Simply input tag key(s) to toggle that tags for selected or hovered files/folders.
# Do not input any delimiter.
{ on = [ "T", "t", "i" ], run = "plugin simple-tag -- toggle-tag --input", desc = "Toggle tag(s) with value from (input box)" },


#─────────────────────────── ADD TAG(S) ───────────────────────────────
# Add a tag (press any tag key)
# A tag hint window will show up.
# Simply press any new tag key to add to selected or hovered files/folders.
{ on = [ "T", "a", "k" ], run = "plugin simple-tag -- add-tag", desc = "Add a tag (press any key)" },

# Fast Add tag(s) with fixed keys=!1q. key=!1q tag=!1q or tags=!1q also work
{ on = [ "T", "a", "f" ], run = "plugin simple-tag -- add-tag --keys=!1q", desc = "Add tag(s) with fixed tag keys = (! and 1 and q)" },
{ on = [ "T", "a", "f" ], run = "plugin simple-tag -- add-tag --keys=*", desc = "Add tag with fixed tag key = *" },
{ on = [ "T", "a", "f" ], run = "plugin simple-tag -- add-tag --key=*", desc = "Add tag with fixed tag key = *" },

# Add tag(s) with value from input box.
# A tag hint window and an input box will show up.
# Simply input new tag key(s) to add to selected or hovered files/folders.
# Do not input any delimiter.
{ on = [ "T", "a", "i" ], run = "plugin simple-tag -- add-tag --input", desc = "Add tag(s) with value from (input box)" },


#─────────────────────────── REMOVE/DELETE TAG(S) ───────────────────────────
# Remove a tag (press any tag key)
# A tag hint window will show up.
# Simply press any tag key to be removed from selected or hovered files/folders.
{ on = [ "T", "d", "k" ], run = "plugin simple-tag -- remove-tag", desc = "Remove a tag (press any key)" },

# Fast Remove tag(s) with fixed keys=!1q. key=!1q tag=!1q or tags=!1q also work
{ on = [ "T", "d", "f" ], run = "plugin simple-tag -- remove-tag --keys=!1q", desc = "Remove tag(s) with fixed tag keys = (! and 1 and q)" },
{ on = [ "T", "d", "f" ], run = "plugin simple-tag -- remove-tag --keys=*", desc = "Remove tag with fixed tag key = *" },
{ on = [ "T", "d", "f" ], run = "plugin simple-tag -- remove-tag --key=*", desc = "Remove tag with fixed tag key = *" },

# Remove tag(s) with value from input box.
# A tag hint window and an input box will show up.
# Simply input tag key(s) to be removed from selected or hovered files/folders.
# Do not input any delimiter.
{ on = [ "T", "d", "i" ], run = "plugin simple-tag -- remove-tag --input", desc = "Remove tag(s) with value from (input box)" },


#─────────────────────────── REPLACE ALL OLD TAG(S) WITH NEW TAG(S) ───────────────────────────
# Replace a tag (press any tag key)
# A tag hint window will show up.
# Simply press any new tag key for selected or hovered files/folders.
{ on = [ "T", "r", "k" ], run = "plugin simple-tag -- replace-tag", desc = "Replace with a new tag (press any key)" },

# Fast Replace tag(s) with fixed keys=!1q. key=!1q tag=!1q or tags=!1q also work
{ on = [ "T", "r", "f" ], run = "plugin simple-tag -- replace-tag --keys=!1q", desc = "Replace tag(s) with fixed tag keys = (! and 1 and q)" },
{ on = [ "T", "r", "f" ], run = "plugin simple-tag -- replace-tag --keys=*", desc = "Replace tag(s) with fixed tag key = *" },
{ on = [ "T", "r", "f" ], run = "plugin simple-tag -- replace-tag --key=*", desc = "Replace tag(s) with fixed tag key = *" },

# Replace tag(s) with value from input box.
# A tag hint window and an input box will show up.
# Simply input new tag key(s) for selected or hovered files/folders.
# Do not input any delimiter.
{ on = [ "T", "r", "i" ], run = "plugin simple-tag -- replace-tag --input", desc = "Replace tag(s) with value from (input box)" },


#─────────────────────────── EDIT TAG(S) ───────────────────────────
# Edit a tag for hovered or selected files/folders
# An input box with current tagged keys and a tag hint window will show up for each hovered or selected files/folders.
# Simply edit tag key(s) for selected or hovered files/folders.
# If you cancel any input box, all changes will be discarded.
{ on = [ "T", "e" ], run = "plugin simple-tag -- edit-tag ", desc = "Edit tag(s) (input box)" },


#  ───────────────────────────── CLEAR TAG(S) ─────────────────────────────
# Clear all tags from selected or hovered files/folders
{ on = [ "T", "c" ], run = "plugin simple-tag -- clear", desc = "Clear all tags from selected or hovered files" },


#  ───────────────────────────── CHANGE UI ─────────────────────────────
# Switch tag indicator between icon > tag key > hidden.
# Useful when u don't remember the tag key
{ on = [ "T", "u", "s" ], run = "plugin simple-tag -- toggle-ui", desc = "Toggle tag indicator (icon > tag key > hidden)" },

# Fixed tag indicator mode = hidden (Available modes: hidden|icon|text)
{ on = [ "T", "u", "h" ], run = "plugin simple-tag -- toggle-ui --mode=hidden", desc = "Hide all tags indicator" },

#  ─────────────────────── FILTER FILES/FOLDERS BY TAGS: ───────────────────────
# Available filter modes:
# and → Filter files which contain all of selected tags (Default if mode isn't specified).
# or → Filter files which contain at least one of selected tags.

# Filter files/folders by tags
# NOTE: For yazi < v25.3.7
#       This use a hacky way to filter files, so it may not work if
#       there are too many files matched the selected  tags.
#       Work just file if there are less than 5000 files.
#       Well,  it depends on your system and the length of file's name.
# NOTE: For yazi version >= v25.3.7, then this limitation is gone, you can search as many files as you want.

# Filter files/folders by a tag (press any tag key)
# A tag hint window will show up.
# Simply press any new tag key to filter files/folders containing that tag in current directory.
{ on = [ "T", "f" ], run = "plugin simple-tag -- filter", desc = "Filter files/folders by a tag (press any key)" },

# Fast Filter files/folders with fixed keys=!1q. key=!1q tag=!1q or tags=!1q also work
# { on = [ "T", "f" ], run = "plugin simple-tag -- filter --key=!", desc = "Filter files/folders by a fixed tag = !" },
# { on = [ "T", "f" ], run = "plugin simple-tag -- filter --keys=!1q", desc = "Filter files/folders by multiple fixed tag(s) (! and 1 and q)" },

# Filter files/folders by tag(s) with value from input box.
# An input box and a tag hint window will show up.
# Simply input tag key(s) to filter files/folders of current directory.
# Do not input any delimiter.
# For example: Input value or --keys=!1q -> filter any files/folders contain all of these tags (! and 1 and q) in current directory.
{ on = [ "T", "F" ], run = "plugin simple-tag -- filter --input", desc = "Filter files/folders by tag(s) (input box)" },

# Filter files/folders by tag(s) with --mode=or.
# --mode=or -> Input value or --keys = !1q -> filter any files/folders contain at least one of these tags (! or 1 or q)
{ on = [ "T", "F" ], run = "plugin simple-tag -- filter --input --mode=or", desc = "Filter files/folders by contain tags (input box)" },
# { on = [ "T", "F" ], run = "plugin simple-tag -- filter --keys=!1q --mode=or", desc = "Filter files/folders by multiple fixed tag(s) (! or 1 or q)" },


#  ─────────────────────── VISUAL SELECT FILES/FOLDERS BY TAGS: ───────────────────────

# Avaiable selection actions:
# replace → Replaces the current selection list with files/folders that have the selected tag.
# unite → Combines the currently selected files/folders with those that have the selected tag.
# intersect → Keeps only the files/folders that are present in both the current selection and the tagged items.
# subtract → Deselects files/folders that have the selected tag.
# exclude → Keeps only the files/folders that do not have the selected tag.
# undo → Undos or redoes the last selection action.

# which_key will popup to choose selection mode
# And a tag hint window will show up.
# Simply select a selection mode then press any tag key to select files/folders
{ on = [ "T", "s", "t" ], run = "plugin simple-tag -- toggle-select", desc = "Select a selection action then select a tag key (toggle-select)" },
# fixed tag(s). --keys=!1q or --key=!1q or --tag=!1q or --tags=!1q. They are the same.
#{ on = [ "T", "s", "t" ], run = "plugin simple-tag -- toggle-select --keys=!1q", desc = "" },

# Run action on files/folders by a tag.
# A tag hint window will show up.
# Simply press any tag key to do the folowing action:
{ on = [ "T", "s", "r" ], run = "plugin simple-tag -- replace-select", desc = "replace-select" },
{ on = [ "T", "s", "u" ], run = "plugin simple-tag -- unite-select", desc = "unite-select" },
{ on = [ "T", "s", "i" ], run = "plugin simple-tag -- intersect-select", desc = "intersect-select" },
{ on = [ "T", "s", "s" ], run = "plugin simple-tag -- subtract-select", desc = "subtract-select" },
{ on = [ "T", "s", "e" ], run = "plugin simple-tag -- exclude-select", desc = "exclude-select" },
# Run action on files/folders by fixed tag(s). --keys=!1q or --key=!1q or --tag=!1q or --tags=!1q. They are the same.
{ on = [ "T", "s", "e" ], run = "plugin simple-tag -- replace-select --keys=!1q", desc = "Replaces the current selection list with files/folders that have (! and 1 and q) tag(s)" },

# Run action on files/folders by tag(s) with value from input box.
# A tag hint window will show up.
# Simply input tag key(s) to do the folowing action:
{ on = [ "T", "s", "R" ], run = "plugin simple-tag -- replace-select --input", desc = "replace-select --input" },
{ on = [ "T", "s", "U" ], run = "plugin simple-tag -- unite-select --input", desc = "unite-select --input" },
{ on = [ "T", "s", "I" ], run = "plugin simple-tag -- intersect-select --input", desc = "intersect-select --input" },
{ on = [ "T", "s", "S" ], run = "plugin simple-tag -- subtract-select --input", desc = "subtract-select --input" },
{ on = [ "T", "s", "E" ], run = "plugin simple-tag -- exclude-select --input", desc = "exclude-select --input" },
# it also support --mode=or when using with --input or --keys=!1q or --key=!1q or --tag=!1q or --tags=!1q
{ on = [ "T", "s", "R" ], run = "plugin simple-tag -- replace-select --input --mode=or", desc = "replace-select --input --mode=or" },
{ on = [ "T", "s", "R" ], run = "plugin simple-tag -- replace-select --keys=!1q --mode=or", desc = "replace-select --keys=!1q --mode=or" },

# Undo/Redo selection (only works after using 5 modes above)
{ on = [ "T", "s", "u" ], run = "plugin simple-tag -- undo-select", desc = "Undos/Redos the last selection action" },
]
#################################################################################################################
keymap = [
#Restore
	{ on = "U", run = "plugin restore", desc = "Restore last deleted files/folders" },
#Bypass
	{on = [ "L" ], run = "plugin bypass", desc = "Recursively enter child directory, skipping children with only a single subdirectory"},
	{on = [ "H" ], run = "plugin bypass --args=reverse", desc = "Recursively enter parent directory, skipping parents with only a single subdirectory"},
#Toggle panes
	{ on = ["@","p"], run = "plugin toggle-pane min-parent", desc = "Toggle parent" },
    { on = ["@" ,"P" ], run = "plugin toggle-pane max-parent", desc = "Maximize parent" },
    { on = ["@" ,"c" ], run = "plugin toggle-pane min-current", desc = "Toggle current" },
    { on = ["@" ,"C" ], run = "plugin toggle-pane max-current", desc = "Maximize current" },
    { on = ["@" ,"n" ], run = "plugin toggle-pane min-preview", desc = "Toggle preview" },
    { on = ["@" ,"N" ], run = "plugin toggle-pane min-preview", desc = "Maximize preview" },
    { on = ["@" ,"0" ], run = "plugin toggle-pane reset", desc = "Reset pane ratio" },
	
	{ on = "<Esc>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "<C-[>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "q",     run = "quit",               desc = "Exit the process" },
	{ on = "Q",     run = "quit --no-cwd-file", desc = "Exit the process without writing cwd-file" },
	{ on = "<C-c>", run = "close",              desc = "Close the current tab, or quit if it is last tab" },
	{ on = "<C-z>", run = "suspend",            desc = "Suspend the process" },
# Hopping
	{ on = "k", run = "arrow prev", desc = "Move cursor up" },
	{ on = "j", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",    run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>",  run = "arrow next",  desc = "Move cursor down" },

	{ on = "<C-u>", run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<C-d>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<C-f>", run = "arrow 100%",  desc = "Move cursor down one page" },

	{ on = "<S-PageUp>",   run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<S-PageDown>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<PageUp>",     run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<PageDown>",   run = "arrow 100%",  desc = "Move cursor down one page" },


	# Navigation
	{ on = "h", run = "leave", desc = "Go back to the parent directory" },
	{ on = "l", run = "enter", desc = "Enter the child directory" },

	{ on = "<Left>",  run = "leave",    desc = "Go back to the parent directory" },
	{ on = "<Right>", run = "enter",    desc = "Enter the child directory" },

	{ on = "H", run = "back",    desc = "Go back to the previous directory" },
	{ on = "L", run = "forward", desc = "Go forward to the next directory" },

# Seeking
	{ on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
	{ on = "J", run = "seek 5",  desc = "Seek down 5 units in the preview" },

	
# Selection
	{ on = "<Space>", run = [ "toggle", "arrow next" ], desc = "Toggle the current selection state" },
	{ on = "v",       run = "visual_mode",                        desc = "Enter visual mode (selection mode)" },
	{ on = "V",       run = "visual_mode --unset",                desc = "Enter visual mode (unset mode)" },
	{ on = ["A","a"],   run = "toggle_all --state=on",            desc = "Select all files" },
	{ on = ["A", "r"],   run = "toggle_all",            desc = "Inverse selection of all files" },

# Operation
	{ on = "O",         run = "open",                        desc = "Open selected files" },
	{ on = "o",         run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = ["R"],   run = "shell --orphan -- explorer /select,\"%0\"",                desc = "Reveal selected files" },
	{ on = "<S-Enter>",   run = "open",                        desc = "Open selected files" },
	{ on = "<Enter>", run = "open --interactive",          desc = "Open selected files interactively" },

	{ on = "y",         run = "yank",                        desc = "Yank selected files (copy)" },
	{ on = "x",         run = "yank --cut",                  desc = "Yank selected files (cut)" },
	{ on = "p",         run = "paste",                       desc = "Paste yanked files" },
	{ on = ["P", "f"],  run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = "-",         run = "link",                        desc = "Symlink the absolute path of yanked files" },
	{ on = "_",         run = "link --relative",             desc = "Symlink the relative path of yanked files" },
	{ on = "<C-->",     run = "hardlink",                    desc = "Hardlink yanked files" },
	{ on = "Y",         run = "unyank",                      desc = "Cancel the yank status" },
	{ on = "X",         run = "unyank",                      desc = "Cancel the yank status" },
	{ on = "d",         run = "remove",                      desc = "Trash selected files" },
	{ on = "D",         run = "remove --permanently",        desc = "Permanently delete selected files" },
	{ on = "a",         run = "create",                      desc = "Create a file (ends with / for directories)" },
	{ on = "r",         run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
	{ on = [".", ";"],         run = "shell --interactive",         desc = "Run a shell command" },
	{ on = ":",         run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
	{ on = "s",         run = "search fd",                   desc = "Search files by name using fd" },
	{ on = "S",         run = "search rg",                   desc = "Search files by content using ripgrep" },
	{ on = "<C-s>",     run = "escape --search",             desc = "Cancel the ongoing search" },
	{ on = "<Esc>",     run = "escape --search",             desc = "Cancel the ongoing search" },
	{ on = "z",         run = "plugin zoxide",               desc = "Jump to a directory using zoxide" },
	{ on = "Z",         run = "plugin fzf",                  desc = "Jump to a directory or reveal a file using fzf" },

# Linemode
	{ on = [ "!", "S" ], run = "linemode size",        desc = "Set linemode to size temporarily" },
	{ on = [ "!", "P" ], run = "linemode permissions", desc = "Set linemode to permissions temporarily" },
	{ on = [ "!", "C" ], run = "linemode ctime",       desc = "Set linemode to ctime temporarily" },
	{ on = [ "!", "M" ], run = "linemode mtime",       desc = "Set linemode to mtime temporarily" },
	{ on = [ "!", "O" ], run = "linemode owner",       desc = "Set linemode to owner temporarily" },
	{ on = [ "!", "N" ], run = "linemode none",        desc = "Set linemode to none temporarily" },
#Pref-by-location
{ on = [ "!", "s" ], run = [ "linemode size", "plugin pref-by-location -- save" ],        desc = "Set linemode to size" },
{ on = [ "!", "p" ], run = [ "linemode permissions", "plugin pref-by-location -- save" ], desc = "Set linemode to permissions" },
{ on = [ "!", "c" ], run = [ "linemode ctime", "plugin pref-by-location -- save" ],       desc = "Set linemode to ctime" },
{ on = [ "!", "m" ], run = [ "linemode mtime", "plugin pref-by-location -- save" ],       desc = "Set linemode to mtime" },
{ on = [ "!", "o" ], run = [ "linemode owner", "plugin pref-by-location -- save" ],       desc = "Set linemode to owner" },
{ on = [ "!", "n" ], run = [ "linemode none", "plugin pref-by-location -- save" ],        desc = "Set linemode to none" },


# Copy
	{ on = [ "c", "c" ], run = "copy path",             desc = "Copy the file path" },
	{ on = [ "c", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
	{ on = [ "c", "f" ], run = "copy filename",         desc = "Copy the filename" },
	{ on = [ "c", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

# Filter
	{ on = "f", run = "filter --smart", desc = "Filter files" },

# Find
	{ on = "/", run = "find --smart",            desc = "Find next file" },
	{ on = "?", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "n", run = "find_arrow",              desc = "Go to the next found" },
	{ on = "N", run = "find_arrow --previous",   desc = "Go to the previous found" },
#Toggle hidden files
#{ on = ".",         run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },
{ on = ["," ,"h"],       run = ["hidden toggle", "plugin pref-by-location -- save"],desc = "Toggle the visibility of hidden files" },
## Sorting
#	{ on = [ ",", "m" ], run = [ "sort modified --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
#	{ on = [ ",", "M" ], run = [ "sort modified --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
#	{ on = [ ",", "c" ], run = [ "sort created --reverse=no", "linemode ctime" ],  desc = "Sort by created time" },
#	{ on = [ ",", "C" ], run = [ "sort created --reverse", "linemode ctime" ],     desc = "Sort by created time (reverse)" },
#	{ on = [ ",", "e" ], run = "sort extension --reverse=no",                      desc = "Sort by extension" },
#	{ on = [ ",", "E" ], run = "sort extension --reverse",                         desc = "Sort by extension (reverse)" },
#	{ on = [ ",", "a" ], run = "sort alphabetical --reverse=no",                   desc = "Sort alphabetically" },
#	{ on = [ ",", "A" ], run = "sort alphabetical --reverse",                      desc = "Sort alphabetically (reverse)" },
#	{ on = [ ",", "n" ], run = "sort natural --reverse=no",                        desc = "Sort naturally" },
#	{ on = [ ",", "N" ], run = "sort natural --reverse",                           desc = "Sort naturally (reverse)" },
#	{ on = [ ",", "s" ], run = [ "sort size --reverse=no", "linemode size" ],      desc = "Sort by size" },
#	{ on = [ ",", "S" ], run = [ "sort size --reverse", "linemode size" ],         desc = "Sort by size (reverse)" },
#	{ on = [ ",", "r" ], run = "sort random --reverse=no",                         desc = "Sort randomly" },

#Pref-by-folder
# Sorting
    # Any changes during disabled state won't be saved to save file.
    { on = [ ",", "t" ], run = "plugin pref-by-location -- toggle",                                                desc = "Toggle auto-save preferences" },
    { on = [ ",", "d" ], run = "plugin pref-by-location -- disable",                                               desc = "Disable auto-save preferences" },
    # This will reset any preference changes for the current working directory (CWD),
    # then fall back to the predefined preferences in init.lua or yazi.toml.
    { on = [ ",", "R" ], run = [ "plugin pref-by-location -- reset" ],                                             desc = "Reset preference of cwd" },
    { on = [ ",", "m" ], run = [ "sort mtime --reverse=no", "linemode mtime", "plugin pref-by-location -- save" ], desc = "Sort by modified time" },
    { on = [ ",", "M" ], run = [ "sort mtime --reverse", "linemode mtime", "plugin pref-by-location -- save" ],    desc = "Sort by modified time (reverse)" },
    { on = [ ",", "b" ], run = [ "sort btime --reverse=no", "linemode btime", "plugin pref-by-location -- save" ], desc = "Sort by birth time" },
    { on = [ ",", "B" ], run = [ "sort btime --reverse", "linemode btime", "plugin pref-by-location -- save" ],    desc = "Sort by birth time (reverse)" },
    { on = [ ",", "e" ], run = [ "sort extension --reverse=no", "plugin pref-by-location -- save" ],               desc = "Sort by extension" },
    { on = [ ",", "E" ], run = [ "sort extension --reverse", "plugin pref-by-location -- save" ],                  desc = "Sort by extension (reverse)" },
    { on = [ ",", "a" ], run = [ "sort alphabetical --reverse=no", "plugin pref-by-location -- save" ],            desc = "Sort alphabetically" },
    { on = [ ",", "A" ], run = [ "sort alphabetical --reverse", "plugin pref-by-location -- save" ],               desc = "Sort alphabetically (reverse)" },
    { on = [ ",", "n" ], run = [ "sort natural --reverse=no", "plugin pref-by-location -- save" ],                 desc = "Sort naturally" },
    { on = [ ",", "N" ], run = [ "sort natural --reverse", "plugin pref-by-location -- save" ],                    desc = "Sort naturally (reverse)" },
    # --sensitive=no or --sensitive
    # { on = [ ",", "N" ], run = [ "sort natural --reverse=no --sensitive", "plugin pref-by-location -- save" ],                    desc = "Sort naturally" },
    { on = [ ",", "s" ], run = [ "sort size --reverse=no", "linemode size", "plugin pref-by-location -- save" ],   desc = "Sort by size" },
    { on = [ ",", "S" ], run = [ "sort size --reverse", "linemode size", "plugin pref-by-location -- save" ],      desc = "Sort by size (reverse)" },
    { on = [ ",", "r" ], run = [ "sort random --reverse=no", "plugin pref-by-location -- save" ],                  desc = "Sort randomly" },

# Goto
	{ on = [ "g", "g" ], run = "arrow -99999999", desc = "Move cursor to the top" },
	{ on = "G",          run = "arrow 99999999",  desc = "Move cursor to the bottom" },
	{ on = [ "g", "c" ],       run = "cd C:",     desc = "Go to the C: drive" },
	{ on = [ "g", "u" ],       run = "shell --orphan -- 'z \\wsl.localhost/Ubuntu-24.04'",     desc = "Go to WSL" },
	{ on = [ "g", "d" ],       run = "cd ~/Downloads",   desc = "Go to the downloads directory" },
	{ on = [ "g", "h" ],       run = "cd ~",             desc = "Go to the home directory" },
	{ on = [ "g", "o" ],       run = "cd C:/Users/LENOVO~1/ONEDRI~1", desc = "Go to the OneDrive"},
	{ on = [ "g", "p" ],       run = "cd C:/Users/LENOVO~1/ONEDRI~1/Pictures", desc = "Go to the Pictures"},
	{ on = [ "g", "D" ],       run = "cd C:/Users/LENOVO~1/ONEDRI~1/Documents", desc = "Go to the Documents"},
	{ on = [ "g", "s" ],       run = "cd C:/Users/LENOVO~1/ONEDRI~1/Study_Materials", desc = "Go to the study materials"},
	{ on = [ "g", "<Space>" ], run = "cd --interactive", desc = "Go to a directory interactively" },

# Tabs
	{ on = ["t","t"], run = "tab_create --current", desc = "Create a new tab with CWD" },

	{ on = ["t","1"], run = "tab_switch 0", desc = "Switch to the first tab" },
	{ on = ["t","2"], run = "tab_switch 1", desc = "Switch to the second tab" },
	{ on = ["t","3"], run = "tab_switch 2", desc = "Switch to the third tab" },
	{ on = ["t","4"], run = "tab_switch 3", desc = "Switch to the fourth tab" },
	{ on = ["t","5"], run = "tab_switch 4", desc = "Switch to the fifth tab" },
	{ on = ["t","6"], run = "tab_switch 5", desc = "Switch to the sixth tab" },
	{ on = ["t","7"], run = "tab_switch 6", desc = "Switch to the seventh tab" },
	{ on = ["t","8"], run = "tab_switch 7", desc = "Switch to the eighth tab" },
	{ on = ["t","9"], run = "tab_switch 8", desc = "Switch to the ninth tab" },

	{ on = "<", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
	{ on = ">", run = "tab_switch 1 --relative",  desc = "Switch to the next tab" },

	{ on = "<A-<>", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
	{ on = "<A->>", run = "tab_swap 1",  desc = "Swap current tab with next tab" },

# Tasks
	{ on = "w", run = "tasks:show", desc = "Show task manager" },

# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]

#################################################################################################################
[tasks]
#################################################################################################################

keymap = [
	{ on = "<Esc>", run = "close", desc = "Close task manager" },
	{ on = "<C-[>", run = "close", desc = "Close task manager" },
	{ on = "<C-c>", run = "close", desc = "Close task manager" },
	{ on = "w",     run = "close", desc = "Close task manager" },

	{ on = "k", run = "arrow prev", desc = "Move cursor up" },
	{ on = "j", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Enter>", run = "inspect", desc = "Inspect the task" },
	{ on = "x",       run = "cancel",  desc = "Cancel the task" },

	# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]

#################################################################################################################
[pick]
#################################################################################################################

keymap = [
	{ on = "<Esc>",   run = "close",          desc = "Cancel selection" },
	{ on = "<C-[>",   run = "close",          desc = "Cancel selection" },
	{ on = "<C-c>",   run = "close",          desc = "Cancel selection" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the selection" },

	{ on = "k", run = "arrow prev", desc = "Move cursor up" },
	{ on = "j", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow next",  desc = "Move cursor down" },

	# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]
#################################################################################################################
[input]
#################################################################################################################
keymap = [
	{ on = "<C-c>",   run = "close",          desc = "Cancel input" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit input" },
	{ on = "<Esc>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },
	{ on = "<C-[>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },

# Mode
	{ on = "i", run = "insert",                              desc = "Enter insert mode" },
	{ on = "a", run = "insert --append",                     desc = "Enter append mode" },
	{ on = "I", run = [ "move -999", "insert" ],             desc = "Move to the BOL, and enter insert mode" },
	{ on = "A", run = [ "move 999", "insert --append" ],     desc = "Move to the EOL, and enter append mode" },
	{ on = "v", run = "visual",                              desc = "Enter visual mode" },
	{ on = "V", run = [ "move -999", "visual", "move 999" ], desc = "Enter visual mode and select all" },

# Character-wise movement
	{ on = "h",       run = "move -1", desc = "Move back a character" },
	{ on = "l",       run = "move 1",  desc = "Move forward a character" },
	{ on = "<Left>",  run = "move -1", desc = "Move back a character" },
	{ on = "<Right>", run = "move 1",  desc = "Move forward a character" },
	{ on = "<C-b>",   run = "move -1", desc = "Move back a character" },
	{ on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

# Word-wise movement
	{ on = "b",     run = "backward",              desc = "Move back to the start of the current or previous word" },
	{ on = "w",     run = "forward",               desc = "Move forward to the start of the next word" },
	{ on = "e",     run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },
	{ on = "<A-b>", run = "backward",              desc = "Move back to the start of the current or previous word" },
	{ on = "<A-f>", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },

# Line-wise movement
	{ on = "0",      run = "move -999", desc = "Move to the BOL" },
	{ on = "<H>",  run = "move -999", desc = "Move to the BOL" },
	{ on = "$",      run = "move 999",  desc = "Move to the EOL" },
	{ on = "<L>",  run = "move 999",  desc = "Move to the EOL" },
	{ on = "<C-a>",  run = "move -999", desc = "Move to the BOL" },
	{ on = "<C-e>",  run = "move 999",  desc = "Move to the EOL" },
	{ on = "<Home>", run = "move -999", desc = "Move to the BOL" },
	{ on = "<End>",  run = "move 999",  desc = "Move to the EOL" },

# Delete
	{ on = "<Backspace>", run = "backspace",	       desc = "Delete the character before the cursor" },
	{ on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
	{ on = "<C-h>",       run = "backspace",         desc = "Delete the character before the cursor" },
	{ on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

# Kill
	{ on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
	{ on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
	{ on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
	{ on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

# Cut/Yank/Paste
	{ on = "d", run = "delete --cut",                              desc = "Cut the selected characters" },
	{ on = "D", run = [ "delete --cut", "move 999" ],              desc = "Cut until the EOL" },
	{ on = "c", run = "delete --cut --insert",                     desc = "Cut the selected characters, and enter insert mode" },
	{ on = "C", run = [ "delete --cut --insert", "move 999" ],     desc = "Cut until the EOL, and enter insert mode" },
	{ on = "x", run = [ "delete --cut", "move 1 --in-operating" ], desc = "Cut the current character" },
	{ on = "y", run = "yank",           desc = "Copy the selected characters" },
	{ on = "p", run = "paste",          desc = "Paste the copied characters after the cursor" },
	{ on = "P", run = "paste --before", desc = "Paste the copied characters before the cursor" },

# Undo/Redo
	{ on = "u",     run = "undo", desc = "Undo the last operation" },
	{ on = "<C-r>", run = "redo", desc = "Redo the last operation" },

# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]

#################################################################################################################
[confirm]
#################################################################################################################
keymap = [
	{ on = "<Esc>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<C-[>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<C-c>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

	{ on = "n", run = "close",          desc = "Cancel the confirm" },
	{ on = "y", run = "close --submit", desc = "Submit the confirm" },

	{ on = "k", run = "arrow prev", desc = "Move cursor up" },
	{ on = "j", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow next",  desc = "Move cursor down" },

	# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]

#################################################################################################################
[completion]
#################################################################################################################

keymap = [
	{ on = "<C-c>",   run = "close",                                      desc = "Cancel completion" },
	{ on = "<Tab>",   run = "close --submit",                             desc = "Submit the completion" },
	{ on = "<Enter>", run = [ "close --submit", "input:close --submit" ], desc = "Submit the completion and input" },

	{ on = "<A-k>", run = "arrow prev", desc = "Move cursor up" },
	{ on = "<A-j>", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<C-p>", run = "arrow prev", desc = "Move cursor up" },
	{ on = "<C-n>", run = "arrow next",  desc = "Move cursor down" },

# Help
	{ on = "<F1>", run = "help", desc = "Open help" },
]

#################################################################################################################
[help]
#################################################################################################################

keymap = [
	{ on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "q",     run = "close",  desc = "Exit the process" },
	{ on = "<C-c>", run = "close",  desc = "Hide the help" },

# Navigation
	{ on = "k", run = "arrow prev", desc = "Move cursor up" },
	{ on = "j", run = "arrow next",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow prev", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow next",  desc = "Move cursor down" },

# Filtering
	{ on = "f", run = "filter", desc = "Apply a filter for the help items" },
]

